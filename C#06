using System;
using System.Buffers.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.Metrics;
using System.Drawing;
using System.Globalization;
using System.Numerics;
using System.Reflection;
using System.Reflection.Emit;
using System.Xml.Linq;
using static System.Collections.Specialized.BitVector32;
using static System.Formats.Asn1.AsnWriter;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace Assignment1
{
    #region p1
    //struct Point
    //{

    //     public int X{ get; set; }
    //    public int Y{ get; set; }
    //    public static double Getdistance(Point p1, Point p2)
    //    {
    //        return Math.Sqrt((p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y));
    //    }
    //} 
    #endregion

    #region p2
    struct person
    {
        public int Age { get; set; }
        public string Name { get; set; }
        public override string ToString()
        {
            return $" Name={Name} , Age={Age} ";
        }
    }
    #endregion
    public enum SecurityLevel
    {
        Guest,
        Developer,
        Secretary,
        DBA
    }
    public enum Gender
    {
        Male,
        Female
    }
    public class HiringDate
    {
        public int Day { get; set; }
        public int Month { get; set; }
        public int Year { get; set; }

        public HiringDate(int day, int month, int year)
        {
            Day = day;
            Month = month;
            Year = year;
        }

        public override string ToString()
        {
            return $"{Day:D2}/{Month:D2}/{Year}";
        }
    }
    public class Employee
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public SecurityLevel SecurityLevel { get; set; }
        public decimal Salary { get; set; }
        public HiringDate HireDate { get; set; }
        public Gender Gender { get; set; }

        // Constructor
        public Employee(int id, string name, SecurityLevel securityLevel, decimal salary, HiringDate hireDate, Gender gender)
        {
            ID = id;
            Name = name;
            SecurityLevel = securityLevel;
            Salary = salary;
            HireDate = hireDate;
            Gender = gender;
        }

        public override string ToString()
        {
            return $"ID: {ID}, Name: {Name}, Gender: {Gender}, Role: {SecurityLevel}, " +
                   $"Salary: {string.Format("{0:C}", Salary)}, " +
                   $"Hire Date: {HireDate}";
        }
    }

    internal class Program
    {
       


        static void Main(string[] args)
        {

            #region p1
            //Console.Write("Enter Point 1:");
            //Point p=new Point();
            //p.X = int.Parse(Console.ReadLine());
            //p.Y= int.Parse(Console.ReadLine());
            //Console.Write("Enter Point 2:");
            //Point p2=new Point();
            //p2.X = int.Parse(Console.ReadLine());
            //p2.Y= int.Parse(Console.ReadLine());
            //Console.WriteLine(Point.Getdistance(p, p2)); 
            #endregion

            #region p2
            //person []arr=new person [3];
            //for (int i = 0; i < 3; i++)
            //{
            //    Console.WriteLine($"Enter name for person {i+1}");
            //    arr[i].Name = Console.ReadLine();
            //    Console.WriteLine($"Enter Age for person {1+i}");
            //    arr[i].Age = int.Parse(Console.ReadLine());
            //}
            //int ans = 0, mn = 0;
            //for (int i = 0; i < 3; i++)
            //{
            //    if (arr[i].Age > mn)
            //    {
            //        ans = i;
            //        mn = arr[i].Age;
            //    }
            //}
            //Console.WriteLine(arr[ans]); 
            #endregion
            Employee[] EmpArr = new Employee[1];
            Console.WriteLine("Enter details for 3 employees:\n");

            for (int i = 0; i < 1; i++)
            {
                Console.WriteLine($" Employee {i + 1} : ");

                int id;
                while (true)
                {
                    Console.Write("ID: ");
                    if (int.TryParse(Console.ReadLine(), out id)) break;                   
                }

                Console.Write("Name: ");
                string name = Console.ReadLine();
                Gender gender;
                Console.WriteLine("Choose Gender [Male, Female]: ");
                while (!Enum.TryParse(Console.ReadLine(), true, out gender))
                {
                    Console.Write("Invalid gender. Enter again (Male or Female): ");
                }

                SecurityLevel level;
                Console.WriteLine("Choose Security Level [Guest, Developer, Secretary, DBA, SecurityOfficer]: ");
                while (!Enum.TryParse(Console.ReadLine(), true, out level))
                {
                    Console.Write("Invalid security level.  Try again: ");
                }


                decimal salary;
                while (true)
                {
                    Console.Write("Salary: ");
                    if (decimal.TryParse(Console.ReadLine(), out salary)&&salary>0) break;
                    Console.WriteLine("Invalid salary. Try again.");
                }

                int day, month, year;
                Console.WriteLine("Enter Hire Date:");
                while (true)
                {
                    Console.Write("Day: ");
                    if (!int.TryParse(Console.ReadLine(), out day)) continue;

                    Console.Write("Month: ");
                    if (!int.TryParse(Console.ReadLine(), out month)) continue;

                    Console.Write("Year: ");
                    if (!int.TryParse(Console.ReadLine(), out year)) continue;
                    break;

                }
                  EmpArr[i] = new Employee(id, name, level, salary, new HiringDate(day, month, year), gender);
                        
                
            }
           
            foreach (var emp in EmpArr)
            {
                Console.WriteLine(emp);
                Console.WriteLine();
            }

        }
    }
}
